#!/usr/bin/env node
/**
 * Main file, use this to run the server:
 * node ranvier [options]
 *
 * Options:
 *   -v Verbose loggin
 *   --port Port to listen on
 *   --locale Locale to act as the default
 *   --save Minutes between autosave
 *   --respawn Minutes between respawn
 */


	// built-ins
var net = require('net'),
	util = require('util'),
	express = require('express'),
	repl = require('repl'),
	fs = require('fs'),

	// local
	Commands = require('./src/commands').Commands,
	Rooms    = require('./src/rooms').Rooms,
	Npcs     = require('./src/npcs').Npcs,
	Items    = require('./src/items').Items,
	Data     = require('./src/data').Data,
	Events   = require('./src/events').Events,
	Plugins  = require('./src/plugins'),
	PlayerManager = require('./src/player_manager').PlayerManager,

	// third party
	Enumerable = require('./src/lib/linq.js'),
	Table = require('cli-table'),
	commander = require('commander'),
	Localize  = require('localize'),
	telnet = require('telnet'),
	mongoose = require('mongoose');

	var db = mongoose.connect('mongodb://localhost/ranviermud').connection;

	db.on('error', function() {
		console.error("Failed to open db connection", arguments);
	});

	db.on('open', function() {
		console.log('Opened connection to database!');
	});

	// init game data
	var Game = {
		Areas: {},
		Npcs: {}
	};

	function initDB() {
		var npc_dir = __dirname + '/game/npcs/';
		var area_dir = __dirname + '/game/areas/';

		var dbSaveHandler = function(err, obj) {
			if(err) {
				console.error("Error saving template: ", err.err);
				return;
			}

			console.log("Object saved successfully. ", obj);
		};

		console.log("*********LOADING AREA FILES***************");
		fs.readdir(area_dir, function (err, files) {
			var area_folder,
				area_file,
				area_files;

			// examine areas folder
			for (var j in files) {
				area_folder = area_dir + files[j];
				if (!fs.statSync(area_folder).isDirectory()) continue;
				// read area folder
				area_files = fs.readdirSync(area_folder);
				for(var i in area_files) {
					if (!area_files[i].match(/area.js/)) continue;
					console.log("found area ", area_folder, area_files[i], files[j]);
					Game.Areas[files[j]] = require(area_folder + '/' + area_files[i]).area;
				}
			}

			console.log("All Areas", Game.Areas);
			for(var area in Game.Areas) {
				Game.Areas[area].initRooms(area_dir + area + '/rooms/');
			}

			console.log("Areas w/ Rooms", Game.Areas);

			// todo: save
		});

		console.log("*********LOADING NPC FILES***************");
		fs.readdir(npc_dir, function (err, files) {
			var npc_file,
				npc_name;

			// Load any npc files
			for (var j in files) {
				npc_file = npc_dir + files[j];
				if (!fs.statSync(npc_file).isFile()) continue;
				if (!npc_file.match(/js$/)) continue;

				npc_name = files[j].split('.')[0];

				Game.Npcs[npc_name] = require(npc_file).npc;
				Game.Npcs[npc_name].save(dbSaveHandler);
			}
		});

		// todo: close process async
	}

/**
 * These aren't really globals, they're only "global" to this file,
 * we'll pass them around via construction as needed
 */

	//storage of main game entities
	var players,
	rooms = new Rooms(),
	items = new Items(),
	npcs  = new Npcs(),
	server,

	// Stuff for the server executable
	l10n,
	respawnint,
	saveint;

// cmdline options
commander
	.version('0.0.1') // todo: yank from package.json
	.option('-s, --save [time]', 'Number of minutes between auto-save ticks [10]', 10)
	.option('-r, --respawn [time]', 'Number of minutes between respawn tickets [20]', 20)
	.option('-p, --port [portNumber]', 'Port to host telnet server [23]', 23)
	.option('-l, --locale [lang]', 'Default locale for the server', 'en')
	.option('-v, --verbose', 'Verbose console logging.');

commander
	.command("initworld")
	.description("intialize the database with templates")
	.action(initDB);

commander
	.command('*')
	.action(StartServer);

commander.parse(process.argv);

/**
 * Do the dirty work
 */
var init = function (restart_server)
{
	util.log("START - Loading entities");
	players = new PlayerManager([]);
	restart_server = typeof restart_server === 'undefined' ? true : restart_server;

	Commands.configure({
		rooms: rooms,
		players: players,
		items: items,
		npcs: npcs,
		locale: commander.locale
	});

	Events.configure({
		players: players,
		items: items,
		locale:  commander.locale,
		npcs: npcs,
		rooms: rooms
	});

	if (restart_server) {
		util.log("START - Starting server");

		/**
		* Effectively the 'main' game loop but not really because it's a REPL
		*/
		server = telnet.createServer(function (client) {
			client.on('window size', function (e) {
				if (e.command === 'sb') {
					// a real "resize" event; 'readline' listens for this
					client.columns = e.columns;
					client.rows = e.rows;
					client.emit('resize');
				}
			});

			client.on('interrupt', function() { client.write('\n*interrupt*\n'); });

			// register all of the events
			for(var event in Events.events) {
				client.on(event, Events.events[event]);
			}

			// 'readline' will call `setRawMode` when it is a function
			client.setRawMode = setRawMode;

			// make unicode characters work properly
			client['do'].transmit_binary();

			// emit 'window size' events
			client['do'].window_size();

			client.write('Connecting...\n');
			util.log('User connected...');

			client.emit('login', client);
		});

		server.on('error', function (err) {
			if (err.code == 'EACCES') {
				console.error('%s: You must be "root" to bind to port %d', err.code, port);
			} else {
				throw err;
			}
		});

		server.on('listening', function () {
			console.log('server listening on port %d', this.address().port);
		});

		// save every 10 minutes
		util.log("Setting autosave to " + commander.save + " minutes.");
		clearInterval(saveint);
		saveint = setInterval(save, commander.save * 60000);

		// respawn every 20 minutes, probably a better way to do this
		util.log("Setting respawn to " + commander.respawn + " minutes.");
		clearInterval(respawnint);
		respawnint = setInterval(load, commander.respawn * 60000);

		Plugins.init(true, {
			players: players,
			items:   items,
			locale:  commander.locale,
			npcs:    npcs,
			rooms:   rooms,
			server:  server
		});

	}

	load(function (success) {
		if (success) {
			// start the server
			server.listen(commander.port);
			server.emit('startup');
		} else {
			process.exit(1);
		}
	});
};

// START IT UP!
//init();

/**
 * The equivalent of "raw mode" via telnet option commands.
 * Set this function on a telnet `client` instance.
 */

function setRawMode (mode) {
	if (mode) {
		this['do'].suppress_go_ahead();
		this.will.suppress_go_ahead();
		this.will.echo();
	} else {
		this.dont.suppress_go_ahead();
		this.wont.suppress_go_ahead();
		this.wont.echo();
	}
}

/**
 * Save all connected players
 */
function save()
{
	util.log("Saving...");
	players.each(function (p) {
		p.save();
	});
	util.log("Done");
}

/**
 * Load rooms, items, npcs. Register items and npcs to their base locations.
 * Configure the event and command modules after load. Doubles as a "respawn"
 */
function load(callback)
{
	util.log("Loading rooms...");
	rooms.load(commander.verbose, function () {
		util.log("Done.");
		util.log("Loading items...");
		items.load(commander.verbose, function () {
			util.log("Done.");

			util.log("Adding items to rooms...");
			items.each(function (item) {
				if (item.getRoom()) {
					var room = rooms.getAt(item.getRoom());
					if (!room.hasItem(item.getUuid())) {
						room.addItem(item.getUuid());
					}
				}
			});
			util.log("Done.");

			util.log("Loading npcs...");
			npcs.load(commander.verbose, function () {
				util.log("Done.");

				util.log("Adding npcs to rooms...");
				npcs.each(function (npc) {
					if (npc.getRoom()) {
						var room =rooms.getAt(npc.getRoom());
						if (!room.hasNpc(npc.getUuid())) {
							room.addNpc(npc.getUuid());
						}
					}
				});
				util.log("Done.");
				if (callback) {
					callback(true);
				}
			});
		});
	});
}

/**
 * Commands that the server executable itself accepts
 */
var server_commands = {
	/**
	 * Hotboot, AKA do everything involved with a restart but keep players connected
	 */
	hotboot : function (args)
	{
		args = args ? args.split(' ') : [];
		var warn = args[0] && args[0] === 'warn';
		var time = args[0] ? parseInt(args[warn ? 1 : 0], 10) : 0;

		if (time && time < 20) {
			console.log("Gotta give the players a bit longer than that, might as well do it instantly...");
			return;
		}
		time = time ? time * 1000 : 0;

		if (warn) {
			warn = function (interval) {
				players.broadcastL10n(l10n, 'HOTBOOT_WARN', interval);
				players.each(function(p) {p.prompt();});
			};
			warn(time / 1000 + " seconds");
			setTimeout(function () { warn(Math.floor((time / 4) / 1000) + " seconds"); }, time - Math.floor(time / 4));
		}

		util.log("HOTBOOTING SERVER" + (time ? " IN " + (time / 1000) + " SECONDS " : ''));
		setTimeout(function () {
			util.log("HOTBOOTING...");
			save();
			init(false);
		}, time);
	},
	/**
	 * Hard restart: saves and disconnects all connected players
	 */
	restart: function (args)
	{
		args = args ? args.split(' ') : [];
		var warn = args[0] && args[0] === 'warn';
		var time = args[0] ? parseInt(args[warn ? 1 : 0], 10) : 0;

		if (time && time < 20) {
			console.log("Gotta give the players a bit longer than that, might as well do it instantly...");
			return;
		}
		time = time ? time * 1000 : 0;

		if (warn) {
			warn = function (interval) {
				players.broadcastL10n(l10n, 'RESTART_WARN', interval);
				players.each(function(p) {p.prompt();});
			};
			warn(time / 1000 + " seconds");
			setTimeout(function () { warn(Math.floor((time / 4) / 1000) + " seconds"); }, time - Math.floor(time / 4));
		}

		util.log("RESTARTING SERVER" + (time ? " IN " + (time / 1000) + " SECONDS " : ''));
		setTimeout(function () {
			util.log("RESTARTING...");
			save();
			server.emit('shutdown');
			server.close();
			players.each(function (p) { p.getSocket().end(); });
			init(true);
		}, time);
	},

	who: function() {
		console.log('\n\t' + players.players.length + ' Players Online');
		// no need to do further processing for 0 count
		if(players.players.length === 0) return;

		var table = new Table({
			head: ['Name', 'Location', 'Online'],
			colWidths: [30, 20, 10]
		});

		var locs = Enumerable.from(rooms.rooms).select('$.value');
		var online = Enumerable.from(players.players)
			.join(locs, '$.location', '$.location', 'outer,inner => [ outer.name, inner.title["en"], outer.lastLogin ]')
			.forEach(function(row) { table.push(row); });

		console.log(table.toString());
	}
};

function StartServer() {
	init();

	// Not game stuff, this is for the server executable
	process.stdin.setEncoding('utf8');
	l10n = new Localize(require('js-yaml').load(require('fs').readFileSync(__dirname + '/l10n/server.yml').toString('utf8')), undefined, 'zz');

	// startup a full node repl for javascript awesomeness
	var serverREPL = repl.start({
		prompt: "ranviermud> ",
		input: process.stdin,
		output: process.stdout
	});

	serverREPL.on('exit', function() {
		process.exit();
	});

	// repl commands start with a dot i.e. ranviermud> .hotboot
	serverREPL.defineCommand('save_players', save);
	serverREPL.defineCommand('hotboot', server_commands.hotboot);
	serverREPL.defineCommand('restart', server_commands.restart);
	serverREPL.defineCommand('who', server_commands.who);

	serverREPL.context.players = players;
	serverREPL.context.rooms = rooms;
	serverREPL.context.npcs = npcs;
	serverREPL.context.items = items;
}


// vim: set syn=javascript :
